#include<iostream>
using namespace std;

class A{  
	public: 
	A(){  //конструктор без параметров
	} 
	~A(){ //деструктор, вызывается неявно
		puts("destr"); 
	}
	A(const A&){ //конструктор копии, не нужен для простого класса 
//(где объекты не обладают ресурсами)
	}
	A operator +(const A&){
		return *this;
	}
	friend ostream &operator <<(ostream &stream, const A &obj){
		stream<<"Hello!\n";
		return stream;
	}
};
A foo(){
	A tmp; //локальный объект, для которого (после return tmp) будет вызван деструктор
	return tmp; //тут неявный вызов конструктора копирования (возвратит в вызывающую функцию копию  объекта tmp)
}
int main(){
	A q(foo());// деструктор (с ключом, отключающим оптимизацию вызова конструктора копирования), 
//вызывается 3 раза  )длядокального объекта tmp,для временного (копиии tmp) и для q,  с оптимизацией (пропуском копий), вероятно, 1 раз
	cout<<q;
	q=q+q;// + еще один временный объект (копия q)
	cout<<q;
	return 0;
}
	
